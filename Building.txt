Splash2D is an extension of Box2D, a 2D physics engine for games
(see http://www.box2d.org).

API documentation is located in Documentation/.

Building Splash2D and Running Examples
--------------------------------------

=== Android ===

This document  assumes that you have installed the Android NDK
(http://developer.android.com/tools/sdk/ndk/index.html) on the
machine performing the build.

Each Splash2D project for Android has an associated AndroidManifest.xml
file and jni subdirectory.  For samples, AndroidManifest.xml
contains details about how to build an Android package (apk).
For libraries, such as Splash2D and freeglut, the AndroidManifest.xml file
informs the ndk-build tool that the directory contains NDK makefiles under
the jni subdirectory.

The following Android NDK projects live in the splash2d directory tree.
* splash2d/Box2D             - splash2d dynamic and static libraries.
* splash2d/Box2D/HelloWorld  - Non-interactive Helloworld sample application.
* splash2d/Box2D/Testbed     - Interactive Testbed sample application.

To build an Android NDK project:
* Open a command line window.
* Go to the working directory containing the project to build.
* Execute ndk-build.

For example, to build the splash2d dynamic and static libraries:

$ cd splash2d/Box2D
$ ndk-build

Running an example requires the Android Development Toolkit (ADT) and the NDK
Eclipse plugin (see http://developer.android.com/sdk/index.html).

* Build a project using "ndk-build" (see above).
* Open ADT Eclipse.
* Select "File->Import..." from the menu.
* Select "Android > Existing Android Code Into Workspace", click "Next".
* Click the "Browse..." button next to "Root Directory:" and select the project
  folder (e.g splash2d/Box2D/Testbed).
* Optionally rename "NativeActivity" to a meaningful project name.
* Click "Finish" and the project should be imported into Eclipse and visible
  in the Package Explorer pane.
* Right-click the project in the Package Explorer pane and select
  "Run->Run As->Android Application" from the menu.
* If you do not have a physical device, you must define a virtual one.
  For details about how to define a virtual device, consult
  http://developer.android.com/tools/devices/managing-avds.html
* If the target is a physical device, unlock the device and observe the
  application executing.

NOTE: The Testbed application currently only runs on a physical target.


By default code is generated for devices that support the armeabi-v7a ABI.
To generate code for all ABIs to include in a fat .apk override APP_ABI on
ndk-build's command line...

$ ndk-build APP_ABI=all


=== Linux ===

The Linux build system requires "cmake" and has been tested with cmake 2.8.7.
You can install cmake using the Linux distribution's package manager
(e.g Ubuntu - "sudo apt-get install cmake") or by downloading the package
from cmake.org (http://www.cmake.org/cmake/resources/software.html).
In addition, to build sample applications, the OpenGL and GLU
(e.g libglapi-mesa & libglu1-mesa-dev) development libraries need to be
installed on the development system.

Building with cmake requires the generation of makefiles from the cmake
project, and then executing "make" to build the library and sample
applications.

The cmake project directory for splash2d is located in splash2d/Box2D.
You can build all build targets using the following.

$ cd splash2d/Box2D
$ cmake -G'Unix Makefiles'
$ make

You can configure the build targets using options exposed in
splash2d/Box2D/CMakeLists.txt by using cmake's -D option.

After building the project, you can execute the samples from the
command line.  For example:

$ ./splash2d/Box2D/Testbed/Testbed


Use the run_tests.sh script to execute unit tests:

$ ./splash2d/Box2D/Unittests/run_tests.sh

=== Windows ===

The splash2d distribution includes a Visual Studio solution
(splash2d/Box2D/Box2D.sln) and project files to build the library and examples
on Windows. The Visual Studio solution has been generated using cmake, and
modified to remove any host-specific dependencies. It has been tested with
Microsoft Visual Studio 2012.

To build with Visual Studio:
* Double-click on splash2d/Box2D/Box2D.sln to open the solution.
* Select "Build->Build Solution" from the menu.

To execute a sample:
* Right-click on an example project (e.g Testbed) in the Solution Explorer
  pane and select "Set as StartUp Project".
* Select "Debug->Start Debugging" from the menu.

When working with the source distribution, you can use cmake
(see http://www.cmake.org) to generate the Visual Studio solution and project
file.  For example, the following generates the Visual Studio solution in the
splash2d/Box2D directory.

> cd splash2d/Box2D
> cmake -G"Visual Studio 11"


Use the run_tests.bat batch file to execute unit tests:

> splash2d\Box2D\Unittests\run_tests.bat


=== OSX ===

A Xcode project is distributed with splash2d to build the library and examples
on OSX.  The Xcode project has been generated using cmake, and modified to
remove any host-specific dependencies. You must have installed Xquartz
(http://xquartz.macosforge.org/) in order to run splash2d sample applications.
After installing Xquartz, you must reboot your machine to set the DISPLAY
environment variable correctly.

To build using Xcode:
* Double-click on splash2d/Box2D/Box2D.xcodeproj to open the project in Xcode.
* Select "Product->Build" from the menu.

To execute a sample:
* Select a sample Scheme, for example "Testbed -> My Mac 64-bit" from the combo
  box to the right of the "Run" button.
* Click the "Run" button.

When working with the source distribution, you can generate the
Xcode project using cmake (see http://www.cmake.org).  For example, the
following generates the Xcode project in the splash2d/Box2D directory.

$ cd splash2d/Box2D
$ cmake -G"Xcode"


Use the run_tests.sh script to execute unit tests:

$ ./splash2d/Box2D/Unittests/run_tests.sh
